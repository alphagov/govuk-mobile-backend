AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  devplatform-deploy canary-circuit-breaker template version: v0.0.0
  Canary deployment circuit breaker template managed by dev-platform.

Parameters:
  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    AllowedValues:
      - build
      - staging
      - production
      - integration
      - demo
      - local
      - dev

  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"

  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    MemorySize: 128
    Timeout: 60
    Runtime: nodejs22.x

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "user-pool"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      DeletionProtection: ACTIVE
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      UserPoolTags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Authentication
      LambdaConfig:
        PostAuthentication: !GetAtt PostAuthenticationFunction.Arn

  WebApplicationFirewall:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Allow: {}
      Scope: REGIONAL
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Join
          - "-"
          - - !Ref AWS::StackName
            - "waf-acl-rules"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
        SampledRequestsEnabled: true
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Authentication

  CognitoWAFAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !GetAtt CognitoUserPool.Arn
      WebACLArn: !GetAtt WebApplicationFirewall.Arn

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Join
        - "-"
        - - !Ref AWS::StackName
          - "api-gateway"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - "-"
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - "/"
                          - Ref: AWS::StackId
      StageName: !Ref Environment
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Authentication

  PostAuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post-authentication-function/
      Handler: app.lambdaHandler
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Authentication
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        SourceMap: false
        EntryPoints:
          - app.ts

  TestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Events:
        HelloWorldApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /test
            Method: GET
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Authentication
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        SourceMap: false
        EntryPoints:
          - app.ts

  AuthProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: proxy/
      Handler: app.lambdaHandler
      Environment:
        Variables:
          COGNITO_URL: !Sub "https://${CognitoUserPool}.auth.${AWS::Region}.amazoncognito.com"
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Authentication
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - app.ts

  UserPoolIdentityProvider:
    Type: "AWS::Cognito::UserPoolIdentityProvider"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ProviderName: "onelogin"
      ProviderType: "OIDC"
      ProviderDetails:
        attributes_request_method: "GET"
        attributes_url: !Join
          - ""
          - - "https://oidc."
            - !Ref Environment
            - ".account.gov.uk/userinfo"
        attributes_url_add_attributes: false
        authorize_scopes: "openid email"
        authorize_url: !Join
          - ""
          - - "https://oidc."
            - !Ref Environment
            - ".account.gov.uk/authorize"
        client_id: "123"
        jwks_uri: !Join
          - ""
          - - "https://oidc."
            - !Ref Environment
            - ".account.gov.uk/.well-known/jwks.json"
        oidc_issuer: !Join
          - ""
          - - "https://oidc."
            - !Ref Environment
            - ".account.gov.uk"
        token_url: !Join
          - ""
          - - "https://oidc."
            - !Ref Environment
            - ".account.gov.uk/token"
      IdpIdentifiers:
        - onelogin
      AttributeMapping:
        email: email
        username: sub
        Target: es2020
        SourceMap: false
        EntryPoints:
          - app.ts

  AuthProxyApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: AuthProxyApi
      ProtocolType: HTTP

  AuthProxyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref AuthProxyApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt AuthProxyFunction.Arn
      IntegrationMethod: POST
      PayloadFormatVersion: '2.0'
  
  AuthProxyRouteCatchAll:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AuthProxyApi
      RouteKey: 'ANY /{proxy+}'
      Target: !Join [ '/', ['integrations', !Ref AuthProxyIntegration] ]

  AuthProxyRouteAuthorize:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AuthProxyApi
      RouteKey: 'GET /oauth2/authorize'
      Target: !Join [ '/', ['integrations', !Ref AuthProxyIntegration] ]

  AuthProxyRouteToken:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref AuthProxyApi
      RouteKey: 'POST /oauth2/token'
      Target: !Join [ '/', ['integrations', !Ref AuthProxyIntegration] ]

  AuthProxyStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref AuthProxyApi
      StageName: !Ref Environment
      AutoDeploy: true

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthProxyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AuthProxyApi}/*/*/*

Outputs:
  ApiGateway:
    Description: API Gateway endpoint URL Hello World function
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/test/

  AuthProxy:
    Description: Auth Proxy Gateway endpoint URL
    Value: !Sub https://${AuthProxyApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/