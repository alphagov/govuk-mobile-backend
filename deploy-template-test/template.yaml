AWSTemplateFormatVersion: "2010-09-09"

Description: >
  devplatform-deploy deploy-template-test template version: v1.5.2
  Defines the IAM role for the GitHub Action workflow used to test the sam-deploy-pipeline
  Managed by dev-platform

Parameters:
  AWSOrganizationId:
    Description: "Comma-separated IDs of AWS Organizations where this account and the target pipeline account are members."
    Type: "CommaDelimitedList"
    Default: "o-pjzf8d99ys,o-dpp53lco28"
    AllowedPattern: "^[a-z0-9-]+$"
    ConstraintDescription: "must be a valid organization ID, made of lowercase letters and numbers"


Outputs:
  GitHubActionsRoleArn:
    Description: >
      The ARN of the role that can be assumed by GitHub Actions in the
      govuk-one-login/devplatform-deploy repository
    Value: !GetAtt GitHubActionsRole.Arn


Resources:
  DeployPolicy1:
    Type: AWS::IAM::ManagedPolicy
    # checkov:skip=CKV_AWS_111:The GitHub Action must be able to create signing configurations to apply the SAM deployment pipeline template
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy1"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "PolicyManagement"
            Effect: "Allow"
            Action:
              - "iam:CreatePolicy*"
              - "iam:DeletePolicy*"
              - "iam:GetPolicy*"
              - "iam:ListPolicyTags"
              - "iam:ListPolicyVersions"
              - "iam:TagPolicy"
              - "iam:UntagPolicy"
            Resource:
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*"
          - Sid: "RoleManagementWithBoundary"  ## no boundary for this role
            Effect: "Allow"
            Action:
              - "iam:AttachRolePolicy"
              - "iam:CreateRole"
              - "iam:DeleteRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:PutRolePermissionsBoundary"
              - "iam:PutRolePolicy"
            Resource: ## all the different role names used in the tests
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/PL-pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/samtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/fartest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/vpctest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/regtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/test-*"
          - Sid: "RoleManagement"
            Effect: "Allow"
            Action:
              - "iam:DeleteRole"
              - "iam:GetRole"
              - "iam:GetRolePolicy"
              - "iam:ListRolePolicies"
              - "iam:ListAttachedRolePolicies"
              - "iam:ListRoleTags"
              - "iam:TagRole"
              - "iam:UntagRole"
              - "iam:UpdateAssumeRolePolicy"
              - "iam:UpdateRole"
              - "iam:UpdateRoleDescription"
            Resource: ## all the different role names used in the tests
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/PL-pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/samtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/fartest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/vpctest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/regtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/test-*"
          - Sid: "ServiceLinkedRoleManagement"
            Effect: "Allow"
            Action:
              - "iam:CreateServiceLinkedRole"
              - "iam:DeleteServiceLinkedRole"
              - "iam:GetServiceLinkedRoleDeletionStatus"
            Resource:
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/*"
          - Sid: "PassAutoscalingRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
          - Sid: "PassRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource: ## all the different role names used in the tests
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/PL-pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/pipelinetest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/samtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/fartest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/vpctest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/regtest-*"
              - !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:role/test-*"
            ## no condition as codebuild doesn't support the iam:PassedToService condition
          - Sid: "AssumeRoleInOrg"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Resource:
              - !Sub "arn:${AWS::Partition}:iam::*:role/*"
            Condition:
              StringEquals:
                "aws:PrincipalOrgID": !Ref AWSOrganizationId
            ## no DenyAssumeRoleInCurrentAccount
          - Sid: "DeploySignedLambda" ## no condition to require signed lambdas
            Effect: "Allow"
            Action:
              - "lambda:CreateFunction"
              - "lambda:PutFunctionCodeSigningConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Sid: "CodeSigning"
            Effect: "Allow"
            Action:
              - "lambda:DeleteCodeSigningConfig" ## allow delete code signing config
              - "lambda:GetCodeSigningConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:code-signing-config:*"
          - Sid: "CodeSigningCreation" ## add create code signing config
            Effect: "Allow"
            Action:
              - "lambda:CreateCodeSigningConfig"
            Resource:
              - "*"
          - Sid: "ManageLambda"
            Effect: "Allow"
            Action:
              - "lambda:AddPermission"
              - "lambda:CreateAlias"
              - "lambda:DeleteAlias"
              - "lambda:DeleteFunction"
              - "lambda:DeleteFunctionConcurrency"
              - "lambda:DeleteFunctionEventInvokeConfig"
              - "lambda:GetAlias"
              - "lambda:GetFunction"
              - "lambda:GetFunctionConfiguration"
              - "lambda:GetFunctionEventInvokeConfig"
              - "lambda:GetPolicy"
              - "lambda:InvokeAsync"
              - "lambda:InvokeFunction"
              - "lambda:ListAliases"
              - "lambda:ListFunctionEventInvokeConfigs"
              - "lambda:ListProvisionedConcurrencyConfigs"
              - "lambda:ListTags"
              - "lambda:ListVersionsByFunction"
              - "lambda:PublishVersion"
              - "lambda:PutFunctionConcurrency"
              - "lambda:PutFunctionEventInvokeConfig"
              - "lambda:RemovePermission"
              - "lambda:TagResource"
              - "lambda:UntagResource"
              - "lambda:UpdateAlias"
              - "lambda:UpdateFunctionCode"
              - "lambda:UpdateFunctionConfiguration"
              - "lambda:UpdateFunctionEventInvokeConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Sid: "ManageLambdaLayers"
            Effect: "Allow"
            Action:
              - "lambda:AddLayerVersionPermission"
              - "lambda:DeleteLayerVersion"
              - "lambda:GetLayerVersion*"
              - "lambda:PublishLayerVersion"
              - "lambda:RemoveLayerVersionPermission"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*"
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*:*"
          - Sid: "LambdaLayers"
            Effect: "Allow"
            Action:
              - "lambda:ListLayer*"
            Resource:
              - "*"
          - Sid: "EventSourceMappings"
            Effect: "Allow"
            Action:
              - "lambda:CreateEventSourceMapping"
              - "lambda:GetEventSourceMapping"
              - "lambda:ListEventSourceMappings"
            Resource:
              - "*"
          - Sid: "EventSourceMappingManagement"
            Effect: "Allow"
            Action:
              - "lambda:DeleteEventSourceMapping"
              - "lambda:UpdateEventSourceMapping"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:*"
          - Sid: "ProvisionedConcurrency"
            Effect: "Allow"
            Action:
              - "lambda:DeleteProvisionedConcurrencyConfig"
              - "lambda:GetProvisionedConcurrencyConfig"
              - "lambda:PutProvisionedConcurrencyConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*:*"
          - Sid: "ManageAutoscaling"
            Effect: "Allow"
            Action:
              - "application-autoscaling:DescribeScalableTargets"
              - "application-autoscaling:RegisterScalableTarget"
              - "application-autoscaling:DeregisterScalableTarget"
              - "application-autoscaling:DescribeScalingPolicies"
              - "application-autoscaling:PutScalingPolicy"
              - "application-autoscaling:DeleteScalingPolicy"
              - "application-autoscaling:DescribeScheduledActions"
            Resource: "*"
          - Sid: "AthenaWorkGroup"
            Effect: "Allow"
            Action:
              - "athena:CreateWorkGroup"
              - "athena:DeleteWorkGroup"
              - "athena:GetWorkGroup"
              - "athena:ListWorkGroups"
              - "athena:UpdateWorkGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:athena:${AWS::Region}:${AWS::AccountId}:workgroup/*"

  DeployPolicy2:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy2"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "ApiGateway"
            Effect: "Allow"
            Action:
              - "apigateway:*"
            Resource:
              - !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::*"
          - Sid: "SNS"
            Effect: "Allow"
            Action:
              - "sns:GetSubscriptionAttributes"
              - "sns:ListSubscriptions"
              - "sns:ListTopics"
              - "sns:SetSubscriptionAttributes"
            Resource:
              - "*"
          - Sid: "SNSSubscribe"
            Effect: "Allow"
            Action:
              - "sns:Unsubscribe"
              - "sns:Subscribe"
            Resource:
              - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:*:*"
          - Sid: "SNSManagement"
            Effect: "Allow"
            Action:
              - "sns:AddPermission"
              - "sns:CreateTopic"
              - "sns:DeleteTopic"
              - "sns:GetTopicAttributes"
              - "sns:ListSubscriptionsByTopic"
              - "sns:ListTagsForResource"
              - "sns:Publish"
              - "sns:RemovePermission"
              - "sns:SetTopicAttributes"
              - "sns:TagResource"
              - "sns:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: "SQSManagement"
            Effect: "Allow"
            Action:
              - "sqs:AddPermission"
              - "sqs:ChangeMessageVisibility"
              - "sqs:CreateQueue"
              - "sqs:DeleteMessage"
              - "sqs:DeleteQueue"
              - "sqs:GetQueueAttributes"
              - "sqs:ListDeadLetterSourceQueues"
              - "sqs:ListQueueTags"
              - "sqs:PurgeQueue"
              - "sqs:ReceiveMessage"
              - "sqs:RemovePermission"
              - "sqs:SendMessage"
              - "sqs:SetQueueAttributes"
              - "sqs:TagQueue"
              - "sqs:UntagQueue"
            Resource:
              - !Sub "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: "SQS"
            Effect: "Allow"
            Action:
              - "sqs:ListQueues"
            Resource:
              - "*"
          - Sid: "KinesisStreamManagement"
            Effect: "Allow"
            Action:
              - "kinesis:AddTagsToStream"
              - "kinesis:CreateStream"
              - "kinesis:DecreaseStreamRetentionPeriod"
              - "kinesis:DeleteStream"
              - "kinesis:DescribeStream*"
              - "kinesis:GetRecords"
              - "kinesis:GetShardIterator"
              - "kinesis:IncreaseStreamRetentionPeriod"
              - "kinesis:ListStreamConsumers"
              - "kinesis:ListTagsForStream"
              - "kinesis:MergeShards"
              - "kinesis:PutRecord*"
              - "kinesis:RegisterStreamConsumer"
              - "kinesis:RemoveTagsFromStream"
              - "kinesis:SplitShard"
              - "kinesis:*StreamEncryption"
              - "kinesis:SubscribeToShard"
            Resource:
              - !Sub "arn:${AWS::Partition}:kinesis:${AWS::Region}:${AWS::AccountId}:stream/*"
          - Sid: "Kinesis"
            Effect: "Allow"
            Action:
              - "kinesis:*EnhancedMonitoring"
              - "kinesis:ListShards"
              - "kinesis:ListStreams"
              - "kinesis:UpdateShardCount"
              - "kinesis:UpdateStreamMode"
            Resource:
              - "*"
          - Sid: "KinesisFirehoseManagement"
            Effect: "Allow"
            Action:
              - "firehose:CreateDeliveryStream"
              - "firehose:DeleteDeliveryStream"
              - "firehose:DescribeDeliveryStream"
              - "firehose:ListTagsForDeliveryStream"
              - "firehose:PutRecord*"
              - "firehose:StartDeliveryStreamEncryption"
              - "firehose:StopDeliveryStreamEncryption"
              - "firehose:TagDeliveryStream"
              - "firehose:UntagDeliveryStream"
              - "firehose:UpdateDestination"
            Resource:
              - !Sub "arn:${AWS::Partition}:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/*"
          - Sid: "KinesisFirehose"
            Effect: "Allow"
            Action:
              - "firehose:ListDeliveryStreams"
            Resource:
              - "*"
          - Sid: "DynamoDBManagement"
            Effect: "Allow"
            Action:
              - "dynamodb:Batch*"
              - "dynamodb:ConditionCheckItem"
              - "dynamodb:CreateBackup"
              - "dynamodb:CreateTable*"
              - "dynamodb:DeleteTable*"
              - "dynamodb:DescribeContinuousBackups"
              - "dynamodb:DescribeContributorInsights"
              - "dynamodb:DescribeKinesisStreamingDestination"
              - "dynamodb:DescribeTable*"
              - "dynamodb:DescribeTimeToLive"
              - "dynamodb:DisableKinesisStreamingDestination"
              - "dynamodb:EnableKinesisStreamingDestination"
              - "dynamodb:ExportTableToPointInTime"
              - "dynamodb:GetItem"
              - "dynamodb:List*"
              - "dynamodb:PartiQL*"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Restore*"
              - "dynamodb:Scan"
              - "dynamodb:StartAwsBackupJob"
              - "dynamodb:TagResource"
              - "dynamodb:UntagResource"
              - "dynamodb:UpdateContinuousBackups"
              - "dynamodb:UpdateContributorInsights"
              - "dynamodb:UpdateItem"
              - "dynamodb:UpdateTable*"
              - "dynamodb:UpdateTimeToLive"
            Resource:
              - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
          - Sid: "DynamoDBStreamManagement"
            Effect: "Allow"
            Action:
              - "dynamodb:DescribeStream"
              - "dynamodb:GetRecords"
              - "dynamodb:GetShardIterator"
            Resource:
              - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/stream/*"
          - Sid: "DynamoDB"
            Effect: "Allow"
            Action:
              - "dynamodb:ListBackups"
              - "dynamodb:ListContributorInsights"
              - "dynamodb:ListStreams"
              - "dynamodb:ListTables"
            Resource:
              - "*"
          - Sid: "S3Management"
            Effect: "Allow"
            Action:
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:DeleteBucketPolicy"
              - "s3:GetAccelerateConfiguration"
              - "s3:GetBucket*"
              - "s3:GetEncryptionConfiguration"
              - "s3:GetIntelligentTieringConfiguration"
              - "s3:GetInventoryConfiguration"
              - "s3:GetLifecycleConfiguration"
              - "s3:GetMetricsConfiguration"
              - "s3:GetReplicationConfiguration"
              - "s3:ListBucket*"
              - "s3:PutAccelerateConfiguration"
              - "s3:PutAccountPublicAccessBlock"
              - "s3:PutAnalyticsConfiguration"
              - "s3:PutBucket*"
              - "s3:PutEncryptionConfiguration"
              - "s3:PutIntelligentTieringConfiguration"
              - "s3:PutInventoryConfiguration"
              - "s3:PutLifecycleConfiguration"
              - "s3:PutMetricsConfiguration"
              - "s3:PutReplicationConfiguration"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::*"
          - Sid: "EventBusManagement"
            Effect: "Allow"
            Action:
              - "events:CreateEventBus"
              - "events:DeleteEventBus"
              - "events:DescribeEventBus"
              - "events:ListTagsForResource"
              - "events:PutEvents"
              - "events:TagResource"
              - "events:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"
          - Sid: "EventRuleManagement"
            Effect: "Allow"
            Action:
              - "events:DeleteRule"
              - "events:DescribeRule"
              - "events:DisableRule"
              - "events:EnableRule"
              - "events:ListTagsForResource"
              - "events:PutRule"
              - "events:PutTargets"
              - "events:RemoveTargets"
              - "events:TagResource"
              - "events:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/*"
          - Sid: "EventHub"
            Effect: "Allow"
            Action:
              - "events:ListEventBuses"
              - "events:ListRules"
              - "events:PutPermission"
              - "events:RemovePermission"
              - "events:TestEventPattern"
            Resource:
              - "*"

  DeployPolicy3:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy3"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "LogManagement"
            Effect: "Allow"
            Action:
              - "logs:AssociateKmsKey"
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:DeleteLogGroup"
              - "logs:DeleteLogStream"
              - "logs:DeleteMetricFilter"
              - "logs:DeleteRetentionPolicy"
              - "logs:DeleteSubscriptionFilter"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:DescribeMetricFilters"
              - "logs:DescribeSubscriptionFilters"
              - "logs:DisassociateKmsKey"
              - "logs:GetLogEvents"
              - "logs:FilterLogEvents"
              - "logs:ListTagsLogGroup"
              - "logs:ListTagsForResource"
              - "logs:PutMetricFilter"
              - "logs:PutRetentionPolicy"
              - "logs:PutSubscriptionFilter"
              - "logs:TagLogGroup"
              - "logs:UntagLogGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:log-stream:*"
          - Sid: "CloudWatchAlarmManagement"
            Effect: "Allow"
            Action:
              - "cloudwatch:DeleteAlarms"
              - "cloudwatch:DescribeAlarmHistory"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:DisableAlarmActions"
              - "cloudwatch:EnableAlarmActions"
              - "cloudwatch:ListTagsForResource"
              - "cloudwatch:PutCompositeAlarm"
              - "cloudwatch:PutMetricAlarm"
              - "cloudwatch:SetAlarmState"
              - "cloudwatch:TagResource"
              - "cloudwatch:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*"
          - Sid: "CloudWatchDashboardManagement"
            Effect: "Allow"
            Action:
              - "cloudwatch:DeleteDashboards"
              - "cloudwatch:GetDashboard"
              - "cloudwatch:ListTagsForResource"
              - "cloudwatch:PutDashboard"
              - "cloudwatch:TagResource"
              - "cloudwatch:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudwatch::${AWS::AccountId}:dashboard/*"
          - Sid: "CloudWatchInsightRuleManagement"
            Effect: "Allow"
            Action:
              - "cloudwatch:DeleteInsightRules"
              - "cloudwatch:DisableInsightRules"
              - "cloudwatch:EnableInsightRules"
              - "cloudwatch:GetInsightRuleReport"
              - "cloudwatch:ListTagsForResource"
              - "cloudwatch:PutInsightRule"
              - "cloudwatch:TagResource"
              - "cloudwatch:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:insight-rule/*"
          - Sid: "CloudWatch"
            Effect: "Allow"
            Action:
              - "cloudwatch:DeleteAnomalyDetector"
              - "cloudwatch:DescribeAlarmsForMetric"
              - "cloudwatch:DescribeAnomalyDetectors"
              - "cloudwatch:DescribeInsightRules"
              - "cloudwatch:ListDashboards"
              - "cloudwatch:PutAnomalyDetector"
            Resource:
              - "*"
          - Sid: "ApiGatewayLogDelivery"
            Effect: "Allow"
            Action:
              - "logs:CreateLogDelivery"
              - "logs:DeleteLogDelivery"
              - "logs:DescribeResourcePolicies"
              - "logs:GetLogDelivery"
              - "logs:ListLogDeliveries"
              - "logs:PutResourcePolicy"
              - "logs:UpdateLogDelivery"
            Resource:
              - "*"
          - Sid: "SSMParameterManagement"
            Effect: "Allow"
            Action:
              - "ssm:AddTagsToResource"
              - "ssm:DeleteParameter*"
              - "ssm:DescribeParameters"
              - "ssm:GetParameter*"
              - "ssm:LabelParameterVersion"
              - "ssm:ListTagsForResource"
              - "ssm:PutParameter"
              - "ssm:RemoveTagsFromResource"
              - "ssm:UnlabelParameterVersion"
            Resource:
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
          - Sid: "SecretsManagerManagement"
            Effect: "Allow"
            Action:
              - "secretsmanager:CreateSecret"                 # pragma: allowlist secret
              - "secretsmanager:DeleteResourcePolicy"         # pragma: allowlist secret
              - "secretsmanager:DeleteSecret"                 # pragma: allowlist secret
              - "secretsmanager:DescribeSecret"               # pragma: allowlist secret
              - "secretsmanager:GetResourcePolicy"            # pragma: allowlist secret
              - "secretsmanager:ListSecretVersionIds"         # pragma: allowlist secret
              - "secretsmanager:PutResourcePolicy"            # pragma: allowlist secret
              - "secretsmanager:PutSecretValue"               # pragma: allowlist secret
              - "secretsmanager:RestoreSecret"                # pragma: allowlist secret
              - "secretsmanager:TagResource"                  # pragma: allowlist secret
              - "secretsmanager:UntagResource"                # pragma: allowlist secret
              - "secretsmanager:UpdateSecret"                 # pragma: allowlist secret
              - "secretsmanager:UpdateSecretVersionStage"     # pragma: allowlist secret
              - "secretsmanager:ValidateResourcePolicy"       # pragma: allowlist secret
            Resource:
              - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
          - Sid: "SecretsManagerGrafana"
            Effect: "Allow"
            Action:
              - "secretsmanager:GetSecretValue"               # pragma: allowlist secret
            Resource:
              - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:pipeline-grafana-api-key*"      # pragma: allowlist secret
          - Sid: "SecretsManagerWithoutTiesToResourcesManagement"
            Effect: "Allow"
            Action:
              - "secretsmanager:GetRandomPassword"            # pragma: allowlist secret
              - "secretsmanager:ListSecrets"                  # pragma: allowlist secret
            Resource: "*"
          - Sid: "StepFunctionManagement"
            Effect: "Allow"
            Action:
              - "states:CreateActivity"
              - "states:CreateStateMachine"
              - "states:DeleteActivity"
              - "states:DeleteStateMachine"
              - "states:UpdateStateMachine"
              - "states:DescribeActivity"
              - "states:DescribeStateMachine"
              - "states:ListTagsForResource"
              - "states:TagResource"
              - "states:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:activity:*"
              - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*"
          - Sid: "ListStepFunctions"
            Effect: "Allow"
            Action:
              - "states:ListActivities"
              - "states:ListStateMachines"
            Resource:
              - "*"

  DeployPolicy4:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy4"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "CodeDeployApplicationManagement"
            Effect: "Allow"
            Action:
              - "codedeploy:BatchGetApplicationRevisions"
              - "codedeploy:BatchGetApplications"
              - "codedeploy:CreateApplication"
              - "codedeploy:DeleteApplication"
              - "codedeploy:GetApplication"
              - "codedeploy:GetApplicationRevision"
              - "codedeploy:ListApplicationRevisions"
              - "codedeploy:ListDeploymentGroups"
              - "codedeploy:ListTagsForResource"
              - "codedeploy:RegisterApplicationRevision"
              - "codedeploy:TagResource"
              - "codedeploy:UntagResource"
              - "codedeploy:UpdateApplication"
            Resource:
              - !Sub "arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*"
          - Sid: "CodeDeployDeploymentGroupManagement"
            Effect: "Allow"
            Action:
              - "codedeploy:BatchGetDeploymentGroups"
              - "codedeploy:BatchGetDeploymentInstances"
              - "codedeploy:BatchGetDeployments"
              - "codedeploy:CreateDeployment"
              - "codedeploy:CreateDeploymentGroup"
              - "codedeploy:DeleteDeploymentGroup"
              - "codedeploy:GetDeployment"
              - "codedeploy:GetDeploymentGroup"
              - "codedeploy:GetDeploymentInstance"
              - "codedeploy:ListDeploymentInstances"
              - "codedeploy:ListTagsForResource"
              - "codedeploy:TagResource"
              - "codedeploy:UntagResource"
              - "codedeploy:UpdateDeploymentGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*/*"
          - Sid: "CodeDeployDeploymentConfigManagement"
            Effect: "Allow"
            Action:
              - "codedeploy:CreateDeploymentConfig"
              - "codedeploy:DeleteDeploymentConfig"
              - "codedeploy:GetDeploymentConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*"
          - Sid: "CodeDeploy"
            Effect: "Allow"
            Action:
              - "codedeploy:BatchGetDeploymentTargets"
              - "codedeploy:ContinueDeployment"
              - "codedeploy:CreateCloudFormationDeployment"
              - "codedeploy:GetDeploymentTarget"
              - "codedeploy:ListApplications"
              - "codedeploy:ListDeploymentConfigs"
              - "codedeploy:ListDeploymentTargets"
              - "codedeploy:SkipWaitTimeForInstanceTermination"
              - "codedeploy:StopDeployment"
            Resource:
              - "*"
          - Sid: "KMS"
            Effect: "Allow"
            Action:
              - "kms:CreateKey"
              - "kms:GenerateRandom"
              - "kms:ListAliases"
              - "kms:ListKeys"
            Resource:
              - "*"
          - Sid: "KMSKeyManagement"
            Effect: "Allow"
            Action:
              - "kms:CancelKeyDeletion"
              - "kms:CreateGrant"
              - "kms:Decrypt"
              - "kms:DescribeKey"
              - "kms:DisableKey*"
              - "kms:EnableKey*"
              - "kms:Encrypt"
              - "kms:GenerateDataKey*"
              - "kms:GetKeyPolicy"
              - "kms:GetKeyRotationStatus"
              - "kms:GetPublicKey"
              - "kms:ListGrants"
              - "kms:ListKeyPolicies"
              - "kms:ListResourceTags"
              - "kms:PutKeyPolicy"
              - "kms:ReEncrypt*"
              - "kms:RetireGrant"
              - "kms:RevokeGrant"
              - "kms:ScheduleKeyDeletion"
              - "kms:Sign"
              - "kms:TagResource"
              - "kms:UntagResource"
              - "kms:UpdateKeyDescription"
              - "kms:Verify"
            Resource:
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
          - Sid: "KMSAliasManagement"
            Effect: "Allow"
            Action:
              - "kms:CreateAlias"
              - "kms:DeleteAlias"
              - "kms:UpdateAlias"
            Resource:
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/*"
              - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*"
          - Sid: "AccessSourceArtifacts"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
            Resource: ## no restriction on source bucket
              - !Sub "arn:${AWS::Partition}:s3:::*/*"
          - Sid: "ManageAppStack"
            Effect: "Allow"
            Action:
              - "cloudformation:CreateChangeSet"
              - "cloudformation:CreateStack"
              - "cloudformation:DeleteStack"
              - "cloudformation:DescribeChangeSet"
              - "cloudformation:DescribeStack*"
              - "cloudformation:DetectStack*"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:GetStackPolicy"
              - "cloudformation:GetTemplate"
              - "cloudformation:GetTemplateSummary"
              - "cloudformation:ListChangeSets"
              - "cloudformation:ListStackResources"
              - "cloudformation:TagResource"
              - "cloudformation:UpdateStack"
              - "cloudformation:UntagResource"
            Resource: ## all the different stacks we can manage
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/pipelinetest-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/samtest-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/fartest-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/vpctest-*/*"
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/regtest-*/*"
          - Sid: "DescribeCurrentStack"
            Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
          - Sid: "ServerlessTransform"
            Effect: "Allow"
            Action:
              - "cloudformation:CreateChangeSet"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
          - Sid: "IncludeTransform"
            Effect: "Allow"
            Action:
              - "cloudformation:CreateChangeSet"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Include"
          - Sid: "CodeDeployBlueGreenTransform"
            Effect: "Allow"
            Action:
              - "cloudformation:CreateChangeSet"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/CodeDeployBlueGreen"

  DeployPolicy5:
    Type: AWS::IAM::ManagedPolicy
    Properties:
    # checkov:skip=CKV_AWS_111:test_create_star
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy5"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "ManageAlb"
            Effect: "Allow"
            Action:
              - "elasticloadbalancing:CreateTargetGroup"
              - "elasticloadbalancing:DeleteTargetGroup"
              - "elasticloadbalancing:ModifyTargetGroup"
              - "elasticloadbalancing:RegisterTargets"
              - "elasticloadbalancing:CreateListener"
              - "elasticloadbalancing:DeleteListener"
              - "elasticloadbalancing:ModifyListener"
              - "elasticloadbalancing:CreateRule"
              - "elasticloadbalancing:DeleteRule"
              - "elasticloadbalancing:DescribeRules"
              - "elasticloadbalancing:CreateLoadBalancer"
              - "elasticloadbalancing:CreateLoadBalancerListeners"
              - "elasticloadbalancing:DeleteLoadBalancerListeners"
              - "elasticloadbalancing:DescribeLoadBalancerAttributes"
              - "elasticloadbalancing:DescribeLoadBalancerListeners"
              - "elasticloadbalancing:DeleteLoadBalancer"
              - "elasticloadbalancing:ModifyLoadBalancerAttributes"
              - "elasticloadbalancing:ModifyTargetGroupAttributes"
              - "elasticloadbalancing:AddTags"
              - "elasticloadbalancing:RemoveTags"
              - "elasticloadbalancing:ModifyListener"
              - "elasticloadbalancing:ModifyLoadBalancerAttributes"
              - "elasticloadbalancing:ModifyRule"
              - "elasticloadbalancing:SetWebACL"
            Resource:
              - !Sub "arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: "ListAlbResources"
            Effect: "Allow"
            Action:
              - "elasticloadbalancing:DescribeLoadBalancers"
              - "elasticloadbalancing:DescribeListeners"
              - "elasticloadbalancing:DescribeTargetGroups"
              - "elasticloadbalancing:DescribeTargetGroupAttributes"
              - "elasticloadbalancing:DescribeTargetHealth"
              - "elasticloadbalancing:DescribeRules"
            Resource:
              - "*"
          - Sid: "ManageSecurityGroups"
            Effect: "Allow"
            Action:
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:CreateSecurityGroup"
              - "ec2:DeleteSecurityGroup"
              - "ec2:ModifySecurityGroupRules"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:AuthorizeSecurityGroupEgress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupEgress"
              - "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
              - "ec2:UpdateSecurityGroupRuleDescriptionsEgress"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*/*"
          - Sid: "NetworkACLs"
            Effect: "Allow"
            Action:
              - "ec2:ReplaceNetworkAclEntry"
              - "ec2:CreateNetworkAclEntry"
              - "ec2:DeleteNetworkAclEntry"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:network-acl/*"
          - Sid: "FlowLogs"
            Effect: "Allow"
            Action:
              - "ec2:DeleteFlowLogs"
              - "ec2:CreateFlowLogs"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*/*"
          - Sid: "VPC"
            Effect: "Allow"
            Action:
              - "ec2:DescribeAccountAttributes"
              - "ec2:DescribeAddresses"
              - "ec2:DescribeInternetGateways"
              - "ec2:DescribeNatGateways"
              - "ec2:DescribeSecurityGroups"
              - "ec2:DescribeSubnets"
              - "ec2:DescribeVpcs"
            Resource:
              - "*"
          - Sid: "CreateEcsClusters"
            Effect: "Allow"
            Action:
              - "ecs:CreateCluster"
              - "ecs:DescribeClusters"
              - "ecs:DescribeServices"
            Resource:
              - "*"
          - Sid: "ManageEcs"
            Effect: "Allow"
            Action:
              - "ecs:DeleteCluster"
              - "ecs:UpdateCluster"
              - "ecs:CreateService"
              - "ecs:DeleteService"
              - "ecs:UpdateService"
              - "ecs:TagResource"
              - "ecs:UntagResource"
              - "ecs:ListTagsForResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: "ManageEcsTaskDefinitions"
            Effect: "Allow"
            Action:
              - "ecs:RegisterTaskDefinition"
              - "ecs:DeregisterTaskDefinition"
              - "ecs:DescribeTaskDefinition"
              - "ecs:CreateTaskSet"
              - "ecs:DeleteTaskSet"
              - "ecs:DescribeTaskSets"
              - "ecs:UpdateServicePrimaryTaskSet"
              - "ecs:UpdateTaskSet"
            Resource:
              - "*"
          - Sid: "CreateRoute53HostedZones"
            Effect: "Allow"
            Action:
              - "route53:CreateHostedZone"
            Resource: "*"
          - Sid: "ManageRoute53"
            Effect: "Allow"
            Action:
              - "route53:GetHostedZone"
              - "route53:DeleteHostedZone"
              - "route53:UpdateHostedZoneComment"
              - "route53:ChangeResourceRecordSets"
              - "route53:ListResourceRecordSets"
              - "route53:ChangeTagsForResource"
              - "route53:ListTagsForResource"
              - "route53:GetChange"
              - "route53:ListQueryLoggingConfigs"
            Resource:
              - !Sub "arn:${AWS::Partition}:route53:::hostedzone/*"
              - !Sub "arn:${AWS::Partition}:route53:::change/*"
          - Sid: "CreateCertificates"
            Effect: "Allow"
            Action:
              - "acm:RequestCertificate"
            Resource: "*"
          - Sid: "ManageCertificates"
            Effect: "Allow"
            Action:
              - "acm:DescribeCertificate"
              - "acm:DeleteCertificate"
              - "acm:ListTagsForCertificate"
              - "acm:AddTagsToCertificate"
              - "acm:RemoveTagsFromCertificate"
              - "acm:UpdateCertificateOptions"
            Resource: !Sub "arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/*"
          - Sid: "ElastiCacheManagement"
            Effect: "Allow"
            Action:
              - "elasticache:AddTagsToResource"
              - "elasticache:AuthorizeCacheSecurityGroupIngress"
              - "elasticache:CreateCacheCluster"
              - "elasticache:CreateCacheParameterGroup"
              - "elasticache:CreateCacheSecurityGroup"
              - "elasticache:CreateCacheSubnetGroup"
              - "elasticache:CreateReplicationGroup"
              - "elasticache:DecreaseReplicaCount"
              - "elasticache:DeleteCacheCluster"
              - "elasticache:DeleteCacheParameterGroup"
              - "elasticache:DeleteReplicationGroup"
              - "elasticache:DeleteCacheSecurityGroup"
              - "elasticache:DeleteCacheSubnetGroup"
              - "elasticache:DescribeCacheClusters"
              - "elasticache:DescribeCacheParameterGroups"
              - "elasticache:DescribeCacheParameters"
              - "elasticache:DescribeCacheParameterGroups"
              - "elasticache:DescribeReplicationGroups"
              - "elasticache:DescribeCacheSubnetGroups"
              - "elasticache:IncreaseReplicaCount"
              - "elasticache:ListAllowedNodeTypeModifications"
              - "elasticache:ListTagsForResource"
              - "elasticache:ModifyCacheCluster"
              - "elasticache:ModifyCacheParameterGroup"
              - "elasticache:ModifyCacheSubnetGroup"
              - "elasticache:ModifyReplicationGroup"
              - "elasticache:ModifyReplicationGroupShardConfiguration"
              - "elasticache:RemoveTagsFromResource"
              - "elasticache:ResetCacheParameterGroup"
              - "elasticache:RevokeCacheSecurityGroupIngress"
            Resource:
              - !Sub "arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:cluster:*"
              - !Sub "arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:parametergroup:*"
              - !Sub "arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:replicationgroup:*"
              - !Sub "arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:securitygroup:*"
              - !Sub "arn:${AWS::Partition}:elasticache:${AWS::Region}:${AWS::AccountId}:subnetgroup:*"
          - Sid: "ElastiCache"
            Effect: "Allow"
            Action:
              - "elasticache:DescribeCacheEngineVersions"
              - "elasticache:DescribeEngineDefaultParameters"
            Resource:
              - "*"

  DeployPolicy6:
    Type: AWS::IAM::ManagedPolicy
    Properties:
    # checkov:skip=CKV_AWS_111:test_create_star
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicy6"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "ManageGlue"
            Effect: "Allow"
            Action:
              - "glue:BatchGetPartition"
              - "glue:BatchCreatePartition"
              - "glue:BatchDeletePartition"
              - "glue:BatchUpdatePartition"
              - "glue:CreateCrawler"
              - "glue:CreateDatabase"
              - "glue:CreateTable"
              - "glue:DeleteTable"
              - "glue:DeleteCrawler"
              - "glue:DeleteDatabase"
              - "glue:GetDatabase"
              - "glue:GetTable"
              - "glue:UpdateCrawler"
              - "glue:UpdateDatabase"
              - "glue:UpdateTable"
            Resource:
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog"
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/*"
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/*"
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/*"
              - !Sub "arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:userDefinedFunction/*"
          - Sid: "GlueSecurityConfig"
            Effect: "Allow"
            Action:
              - "glue:DeleteSecurityConfiguration"
              - "glue:CreateSecurityConfiguration"
              - "glue:GetSecurityConfiguration"
            Resource: "*"
          - Sid: "WafV2"
            Effect: "Allow"
            Action:
              - "wafv2:*IPSet"
              - "wafv2:*LoggingConfiguration"
              - "wafv2:*PermissionPolicy"
              - "wafv2:*RegexPatternSet"
              - "wafv2:*RuleGroup"
              - "wafv2:*WebACL"
              - "wafv2:*FirewallManager*"
              - "wafv2:GetSampledRequests"
              - "wafv2:GetWebACLForResource"
              - "wafv2:TagResource"
              - "wafv2:UntagResource"
              - "wafv2:ListTagsForResource"
              - "wafv2:UpdateManagedRuleSetVersionExpiryDate"
            Resource:
              - !Sub "arn:${AWS::Partition}:wafv2:${AWS::Region}:${AWS::AccountId}:*"
              - !Sub "arn:${AWS::Partition}:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:*"
              - !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::*"
          - Sid: "WafV2Global"
            Effect: "Allow"
            Action:
              - "wafv2:TagResource"
              - "wafv2:UntagResource"
              - "wafv2:GetWebACLForResource"
              - "wafv2:GetWebACL"
            Resource:
              - !Sub "arn:${AWS::Partition}:wafv2:us-east-1:${AWS::AccountId}:*"
          - Sid: "WafV2List"
            Effect: "Allow"
            Action:
              - "wafv2:List*"
            Resource:
              - "*"
          - Sid: "CloudFront"
            Effect: "Allow"
            Action:
              - "cloudfront:CreateOriginRequestPolicy"
              - "cloudfront:DeleteOriginRequestPolicy"
              - "cloudfront:ListDistributionsByCachePolicyId"
              - "cloudfront:GetCachePolicyConfig"
              - "cloudfront:TagResource"
              - "cloudfront:UpdateOriginRequestPolicy"
              - "cloudfront:ListCachePolicies"
              - "cloudfront:CreateDistribution"
              - "cloudfront:ListOriginRequestPolicies"
              - "cloudfront:GetOriginRequestPolicyConfig"
              - "cloudfront:CreateCachePolicy"
              - "cloudfront:GetDistribution"
              - "cloudfront:UpdateCachePolicy"
              - "cloudfront:ListTagsForResource"
              - "cloudfront:GetOriginRequestPolicy"
              - "cloudfront:ListDistributions"
              - "cloudfront:DeleteCachePolicy"
              - "cloudfront:UpdateDistribution"
              - "cloudfront:GetCachePolicy"
              - "cloudfront:DeleteDistribution"
              - "cloudfront:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:*"

  DeployPolicyExtra:
    Type: AWS::IAM::ManagedPolicy
    # checkov:skip=CKV_AWS_111:Creating an ECR repository doesn't take a resource
    Properties:
      ManagedPolicyName:
        Fn::Join:
          - "-"
          - - !Ref AWS::StackName
            - "DeployPolicyExtra"
            - Fn::Select:
                - 4
                - Fn::Split:
                    - "-"
                    - Fn::Select:
                        - 2
                        - Fn::Split:
                            - "/"
                            - Ref: AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "ManageS3Objects"
            Effect: "Allow"
            Action:
              - "s3:DeleteObject*"
              - "s3:PutObject"
              - "s3:GetObjectTagging"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::*/*"
          - Sid: "CodePipelineManagement"
            Effect: "Allow"
            Action:
              - "codepipeline:CreatePipeline"
              - "codepipeline:DeletePipeline"
              - "codepipeline:GetPipeline"
              - "codepipeline:GetPipelineExecution"
              - "codepipeline:GetPipelineState"
              - "codepipeline:ListPipelineExecutions"
              - "codepipeline:TagResource"
              - "codepipeline:UpdatePipeline"
            Resource:
              - !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:*"
          - Sid: "CodeBuildManagement"
            Effect: "Allow"
            Action:
              - "codebuild:CreateProject"
              - "codebuild:DeleteProject"
              - "codebuild:BatchGetProjects"
              - "codebuild:UpdateProject"
            Resource:
              - !Sub "arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/*"
          - Sid: "Signer"
            Effect: "Allow"
            Action:
              - "signer:GetSigningProfile"
              - "signer:ListSigningProfiles"
              - "signer:ListSigningJobs"
              - "signer:DescribeSigningJob"
              - "signer:StartSigningJob"
            Resource:
              - "*"
          - Sid: "CodeSigning"
            Effect: "Allow"
            Action:
              - "lambda:DeleteCodeSigningConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:code-signing-config:*"
          - Sid: "VPCManagement"
            Effect: "Allow"
            Action:
              - "ec2:AllocateAddress"
              - "ec2:AssociateAddress"
              - "ec2:AssociateRouteTable"
              - "ec2:AssociateSubnetCidrBlock"
              - "ec2:AttachInternetGateway"
              - "ec2:CreateInternetGateway"
              - "ec2:CreateNatGateway"
              - "ec2:CreateRoute"
              - "ec2:CreateRouteTable"
              - "ec2:CreateSubnet"
              - "ec2:CreateVpc"
              - "ec2:CreateVpcEndpoint"
              - "ec2:DeleteInternetGateway"
              - "ec2:DeleteNatGateway"
              - "ec2:DeleteRoute"
              - "ec2:DeleteRouteTable"
              - "ec2:DeleteSubnet"
              - "ec2:DeleteVpc"
              - "ec2:DeleteVpcEndpoints"
              - "ec2:DetachInternetGateway"
              - "ec2:DisassociateAddress"
              - "ec2:DisassociateRouteTable"
              - "ec2:DisassociateSubnetCidrBlock"
              - "ec2:ModifySubnetAttribute"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyVpcEndpoint"
              - "ec2:ReleaseAddress"
            Resource:
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:*"
              - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:elastic-ip/*"
          - Sid: "VPC"
            Effect: "Allow"
            Action:
              - "ec2:Describe*"
            Resource:
              - "*"
          - Sid: "ECRCreate"
            Effect: "Allow"
            Action:
              - "ecr:CreateRepository"
              - "ecr:DescribeRegistry"
              - "ecr:GetAuthorizationToken"
            Resource:
              - "*"
          - Sid: "ECRRepository"
            Effect: "Allow"
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchDeleteImage"
              - "ecr:BatchGetImage"
              - "ecr:CompleteLayerUpload"
              - "ecr:DeleteRepository*"
              - "ecr:GetDownloadUrlForLayer"
              - "ecr:InitiateLayerUpload"
              - "ecr:ListImages"
              - "ecr:ListTagsForResource"
              - "ecr:PutImage"
              - "ecr:PutImageTagMutability"
              - "ecr:SetRepositoryPolicy"
              - "ecr:TagResource"
              - "ecr:UploadLayerPart"
              - "ecr:UntagResource"
            Resource:
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*"
          - Sid: "XRay"
            Effect: "Allow"
            Action:
              - "xray:BatchGetTraces"
            Resource: "*"
          - Sid: "Route53FirewallAssociation"
            Effect: "Allow"
            Action:
              - "route53resolver:AssociateFirewallRuleGroup"
              - "route53resolver:DisassociateFirewallRuleGroup"
              - "route53resolver:GetFirewallRuleGroupAssociation"
              - "route53resolver:TagResource"
              - "route53resolver:UntagResource"
              - "route53resolver:UpdateFirewallRuleGroupAssociation"
            Resource:
              - !Sub "arn:${AWS::Partition}:route53resolver:${AWS::Region}:${AWS::AccountId}:firewall-rule-group-association/*"
          - Sid: "Route53FirewallDomainList"
            Effect: "Allow"
            Action:
              - "route53resolver:CreateFirewallDomainList"
              - "route53resolver:DeleteFirewallDomainList"
              - "route53resolver:GetFirewallDomainList"
              - "route53resolver:ImportFirewallDomains"
              - "route53resolver:TagResource"
              - "route53resolver:UntagResource"
              - "route53resolver:UpdateFirewallDomains"
            Resource:
              - !Sub "arn:${AWS::Partition}:route53resolver:${AWS::Region}:${AWS::AccountId}:firewall-domain-list/*"
          - Sid: "Route53FirewallRuleGroup"
            Effect: "Allow"
            Action:
              - "route53resolver:CreateFirewallRule"
              - "route53resolver:CreateFirewallRuleGroup"
              - "route53resolver:DeleteFirewallRule"
              - "route53resolver:DeleteFirewallRuleGroup"
              - "route53resolver:GetFirewallRuleGroup"
              - "route53resolver:TagResource"
              - "route53resolver:UntagResource"
              - "route53resolver:UpdateFirewallRule"
            Resource:
              - !Sub "arn:${AWS::Partition}:route53resolver:${AWS::Region}:${AWS::AccountId}:firewall-rule-group/*"
              - !Sub "arn:${AWS::Partition}:route53resolver:${AWS::Region}:${AWS::AccountId}:firewall-domain-list/*"
          - Sid: "Route53FirewallConfig"
            Effect: "Allow"
            Action:
              - "route53resolver:GetFirewallConfig"
              - "route53resolver:ListFirewallConfigs"
              - "route53resolver:TagResource"
              - "route53resolver:UntagResource"
              - "route53resolver:UpdateFirewallConfig"
            Resource:
              - !Sub "arn:${AWS::Partition}:route53resolver:${AWS::Region}:${AWS::AccountId}:firewall-config/*"
          - Sid: "Route53Firewall"
            Effect: "Allow"
            Action:
              - "route53resolver:ListFirewallDomains"
              - "route53resolver:ListFirewallDomainLists"
              - "route53resolver:ListFirewallRuleGroupAssociations"
              - "route53resolver:ListFirewallRules"
              - "route53resolver:ListFirewallRuleGroups"
              - "route53resolver:ListTagsForResource"
            Resource:
              - "*"
          - Sid: "NetworkFirewall"
            Effect: "Allow"
            Action:
              - "network-firewall:AssociateSubnets"
              - "network-firewall:AssociateFirewallPolicy"
              - "network-firewall:CreateFirewall"
              - "network-firewall:CreateFirewallPolicy"
              - "network-firewall:CreateRuleGroup"
              - "network-firewall:CreateFirewall"
              - "network-firewall:PutResourcePolicy"
              - "network-firewall:TagResource"
              - "network-firewall:DeleteFirewall"
              - "network-firewall:DeleteFirewallPolicy"
              - "network-firewall:DeleteResourcePolicy"
              - "network-firewall:DeleteRuleGroup"
              - "network-firewall:DescribeFirewall"
              - "network-firewall:DescribeFirewallPolicy"
              - "network-firewall:DescribeLoggingConfiguration"
              - "network-firewall:DescribeResourcePolicy"
              - "network-firewall:DescribeRuleGroup"
              - "network-firewall:ListRuleGroups"
              - "network-firewall:ListFirewalls"
              - "network-firewall:UpdateLoggingConfiguration"
              - "network-firewall:UpdateRuleGroup"
            Resource:
              - !Sub "arn:${AWS::Partition}:network-firewall:${AWS::Region}:${AWS::AccountId}:firewall/*"
              - !Sub "arn:${AWS::Partition}:network-firewall:${AWS::Region}:${AWS::AccountId}:firewall-policy/*"
              - !Sub "arn:${AWS::Partition}:network-firewall:${AWS::Region}:${AWS::AccountId}:stateful-rulegroup/*"

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "GovUkOneLoginGitHubActionsRole"
            Effect: "Allow"
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: !ImportValue GitHubIdentityProviderArn
            Condition:
              StringLike:
                "token.actions.githubusercontent.com:sub": "repo:govuk-one-login/devplatform-deploy:*"

      ManagedPolicyArns:
        - !Ref DeployPolicy1
        - !Ref DeployPolicy2
        - !Ref DeployPolicy3
        - !Ref DeployPolicy4
        - !Ref DeployPolicy5
        - !Ref DeployPolicy6
        - !Ref DeployPolicyExtra
      Tags:
        - Key: Name
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - "GitHubActionsRole"
        - Key: Service
          Value: "ci/cd"
        - Key: Source
          Value: "govuk-one-login/devplatform-deploy/deploy-template-test/template.yaml"
