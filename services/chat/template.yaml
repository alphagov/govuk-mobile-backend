AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  GOV.UK Mobile Backend Chat template.

Parameters:
  Environment:
    Description: The name of the environment to deploy to
    Type: String
    AllowedValues:
      - build
      - staging
      - production
      - integration
      - local
      - dev

  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: none

  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Default: none

  ConfigStackName:
    Type: String
    Description: Stack Name for Config Stack
    Default: govuk-app-config
  
  AppBackendStackName:
    Type: String
    Description: Stack Name for GovUK APP Auth Stack
    Default: govuk-app-backend

Conditions:
  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none

  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

  IsIntegratedEnvironment:
    Fn::Or:
      - Fn::Equals:
          - !Ref Environment
          - 'production'
      - Fn::Equals:
          - !Ref Environment
          - 'integration'

  IsNonIntegratedEnvironment:
    Fn::Not:
    - Condition: IsIntegratedEnvironment

Mappings:
  OneLogin:
    Environment:
      build: https://oidc.integration.account.gov.uk
      dev: https://oidc.integration.account.gov.uk
      staging: https://oidc.staging.account.gov.uk
      integration: https://oidc.integration.account.gov.uk
      production: https://oidc.account.gov.uk

  LogRetentionByEnv:
    Environment:
      local: 30
      build: 30
      dev: 30
      staging: 30
      integration: 30
      production: 365

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    MemorySize: 128
    Timeout: 60
    Runtime: nodejs22.x

Resources:
  ChatApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-chat-proxy
      Description: API Gateway for the GOV.UK Mobile Backend Chat Proxy
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  # PoC: Streaming Lambda exposed via Function URL for easy local testing
  ChatStreamingFunction:
    Type: AWS::Serverless::Function
    Condition: IsNonIntegratedEnvironment
    Properties:
      FunctionName: !Sub ${AWS::StackName}-chat-streaming
      Handler: handler.lambdaHandler
      CodeUri: .build/streaming
      Runtime: nodejs22.x
      Description: PoC Lambda that streams SSE using Lambda response streaming
      Policies:
        - AWSLambdaBasicExecutionRole
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins: ['*']
          AllowMethods: ['GET','POST']
          AllowHeaders: ['*']
        InvokeMode: RESPONSE_STREAM
      Environment:
        Variables:
          NODE_OPTIONS: '--enable-source-maps'
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Chat

  # Explicit permission for Function URL invocation in non-integrated envs
  ChatStreamingFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNonIntegratedEnvironment
    Properties:
      FunctionName: !Ref ChatStreamingFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE

  # CloudFront distribution fronting the Function URL for streaming (dev-only)
  ChatStreamingCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsNonIntegratedEnvironment
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: ChatStreamingFunctionUrlOrigin
            DomainName: !Select
              - 2
              - !Split
                - '/'
                - !GetAtt ChatStreamingFunctionUrl.FunctionUrl
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: ChatStreamingFunctionUrlOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          OriginRequestPolicyId: !Ref ChatStreamingOriginRequestPolicy
          Compress: false
        DefaultRootObject: ''
        PriceClass: PriceClass_100
        Comment: !Sub ${AWS::StackName}-chat-streaming-cf
        IPV6Enabled: true

  ChatStreamingOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Condition: IsNonIntegratedEnvironment
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub ${AWS::StackName}-chat-streaming-origin-policy
        CookiesConfig:
          CookieBehavior: none
        HeadersConfig:
          HeaderBehavior: whitelist
          Headers:
            - Govuk-Chat-End-User-Id
            - Accept
            - Content-Type
        QueryStringsConfig:
          QueryStringBehavior: all

  ChatApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ChatApiGateway.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref ChatApiGateway

  ChatApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ChatApiGatewayResource
      RestApiId: !Ref ChatApiGateway
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ChatApiGatewayAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP_PROXY
        IntegrationHttpMethod: ANY
        Uri: !Sub
          - "{{resolve:ssm:/${ConfigStackName}/chat/api-url}}/${proxy}"
          - { proxy: "{proxy}" }
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
          integration.request.header.Authorization: context.authorizer.bearerToken
          integration.request.header.Govuk-Chat-End-User-Id: context.authorizer.Govuk-Chat-End-User-Id
        PassthroughBehavior: WHEN_NO_MATCH

  ChatApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-chat-proxy-authorizer
      RestApiId: !Ref ChatApiGateway
      Type: REQUEST
      IdentitySource: method.request.header.Authorization
      AuthorizerUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatAuthorizerFunction.Arn}/invocations"
      AuthorizerResultTtlInSeconds: 300

  ChatApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/api-gateway/${AWS::StackName}-chat-proxy-access-logs
      KmsKeyId: !GetAtt ChatApiGatewayAccessLogGroupKMSKey.Arn
      RetentionInDays: !FindInMap [LogRetentionByEnv, Environment, !Ref Environment]
      DataProtectionPolicy:
        Name: CloudWatchLogs-PersonalInformation-Protection
        Description: Protect basic types of sensitive data
        Version: "2021-06-01"
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
            Operation:
              Audit:
                FindingsDestination: {}
          - Sid: masking-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
            Operation:
              Deidentify:
                MaskConfig: {} # marks sensitive data with asterisks
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatApiGatewayAccessLogGroupKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting the Chat API Gateway Access Log Group
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource:
              - "*"
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatApiGatewayDeployment20250828:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ChatApiGatewayMethod
    Properties:
      RestApiId: !Ref ChatApiGateway

  ChatApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref Environment
      RestApiId: !Ref ChatApiGateway
      DeploymentId: !Ref ChatApiGatewayDeployment20250828
      MethodSettings:
        - ThrottlingRateLimit: 10000
          ThrottlingBurstLimit: 5000
          LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
      AccessLogSetting:
        DestinationArn: !GetAtt ChatApiGatewayAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","authorizeError":"$context.authorize.error","authorizeLatency":"$context.authorize.latency","authorizeStatus":"$context.authorize.status","authorizerIntegrationLatency":"$context.authorizer.integrationLatency","authorizerIntegrationStatus":"$context.authorizer.integrationStatus","authorizerLatency":"$context.authorizer.latency","authorizerRequestId":"$context.authorizer.requestId","authorizerStatus":"$context.authorizer.status"}'
  
  ChatApiGatewayWaf:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub ${AWS::StackName}-waf-chat-proxy
      Description: WAF for the GOV.UK Mobile Backend Chat Proxy
      Scope: REGIONAL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        CloudWatchMetricsEnabled: true
        MetricName: !Sub ${AWS::StackName}-waf-chat-proxy-acl-rules
        SampledRequestsEnabled: true
      Rules:
        - Name: RateLimitRule
          Action:
            Block:
              CustomResponse:
                ResponseCode: 429
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 300
              AggregateKeyType: IP
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub ${AWS::StackName}-chat-proxy-waf-rate-limit-rule
            SampledRequestsEnabled: true
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 2
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
          OverrideAction:
            None: {}
          VisibilityConfig:
            CloudWatchMetricsEnabled: true
            MetricName: !Sub ${AWS::StackName}-waf-chat-proxy-known-bad-inputs-rule
            SampledRequestsEnabled: true
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatApiGatewayWafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${ChatApiGateway}/stages/${ChatApiGatewayStage}
      WebACLArn: !GetAtt ChatApiGatewayWaf.Arn

  ChatApiGatewayWafLoggingConfiguration:
    Type: AWS::WAFv2::LoggingConfiguration
    Properties:
      ResourceArn: !GetAtt ChatApiGatewayWaf.Arn
      LogDestinationConfigs:
        - !GetAtt ChatApiGatewayWafLogGroup.Arn

  ChatApiGatewayWafLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      # log stream must start with aws-waf-logs-
      LogGroupName: !Sub aws-waf-logs-chat-proxy-${AWS::StackName}
      KmsKeyId: !GetAtt ChatApiGatewayWafLogGroupKMSKey.Arn
      RetentionInDays: !FindInMap [LogRetentionByEnv, Environment, !Ref Environment]
      DataProtectionPolicy:
        Name: CloudWatchLogs-PersonalInformation-Protection
        Description: Protect basic types of sensitive data
        Version: '2021-06-01'
        Configuration:
          CustomDataIdentifier:
            - Name: JWTTokens
              Regex: e[yw][A-Za-z0-9-_]+\.(?:e[yw][A-Za-z0-9-_]+)?\.[A-Za-z0-9-_]{2,}(?:(?:\.[A-Za-z0-9-_]{2,}){2})?
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - JWTTokens
            Operation:
              Audit:
                FindingsDestination: {}
          - Sid: redact-policy
            DataIdentifier:
              - JWTTokens
            Operation:
              Deidentify:
                MaskConfig: {}
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatApiGatewayWafLogGroupKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting the Chat API Gateway WAF Log Group
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource:
              - '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-chat-proxy-authorizer
      CodeUri: .build/authorizer
      Handler: app.lambdaHandler
      Role: !GetAtt ChatAuthorizerFunctionIAMRole.Arn
      KmsKeyArn: !GetAtt ChatAuthorizerFunctionKMSKey.Arn
      LoggingConfig:
        LogGroup: !Ref ChatAuthorizerFunctionLogGroup
      Environment:
        Variables:
          CHAT_SECRET_NAME: !Sub /${ConfigStackName}/chat/secrets
          REGION: !Ref AWS::Region
          OIDC_ISSUER: !FindInMap [OneLogin, Environment, !Ref Environment]
          POWERTOOLS_SERVICE_NAME: !Sub ${AWS::StackName}-chat-proxy-authorizer
          POWERTOOLS_LOGGER_LOG_EVENT: !If
          - IsNonIntegratedEnvironment
          - "True"
          - "False"
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Chat

  ChatAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-chat-proxy-authorizer-function
      KmsKeyId: !GetAtt ChatLambdaLogGroupKMSKey.Arn
      RetentionInDays: !FindInMap [LogRetentionByEnv, Environment, !Ref Environment]
      DataProtectionPolicy:
        Name: CloudWatchLogs-PersonalInformation-Protection
        Description: Protect basic types of sensitive data
        Version: '2021-06-01'
        Configuration:
          CustomDataIdentifier:
            - Name: JWTTokens
              Regex: e[yw][A-Za-z0-9-_]+\.(?:e[yw][A-Za-z0-9-_]+)?\.[A-Za-z0-9-_]{2,}(?:(?:\.[A-Za-z0-9-_]{2,}){2})?
        Statement:
          - Sid: audit-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - JWTTokens
            Operation:
              Audit:
                FindingsDestination: {}
          - Sid: masking-policy
            DataIdentifier:
              - arn:aws:dataprotection::aws:data-identifier/EmailAddress
              - arn:aws:dataprotection::aws:data-identifier/IpAddress
              - JWTTokens
            Operation:
              Deidentify:
                MaskConfig: {}
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatLambdaLogGroupKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting Chat Lambda log groups
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource:
              - '*'
            Condition:
              ArnLike:
                kms:EncryptionContext:aws:logs:arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatAuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatAuthorizerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatApiGateway}/*

  ChatAuthorizerFunctionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-chat-proxy-authorizer-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ChatAuthorizerFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue # pragma: allowlist secret
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${ConfigStackName}/chat/secrets-*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-chat-proxy-authorizer-function:*
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  ChatAuthorizerFunctionKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting Chat authorizer secrets
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: !Sub lambda.amazonaws.com
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
            Resource:
              - "*"
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  CloudwatchAlarmChatProxy5xxErrors:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-chat-proxy-5xx-errors
      AlarmDescription: !Sub |
        Alarm detects a high rate of server-side errors.
        See resolution steps in runbook:
        {{resolve:ssm:/${ConfigStackName}/runbook-links/prefix}}/pages/4613701633/Runbook+Chat+API+Gateway+alarms
      Namespace: AWS/ApiGateway
      Statistic: Average
      ActionsEnabled: true
      MetricName: 5XXError
      Period: 60
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 0.05
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      Dimensions:
        - Name: ApiName
          Value: !Sub ${AWS::StackName}-chat-proxy
        - Name: Stage
          Value: !Ref Environment
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AppBackendStackName}-cloudwatch-alarm-topic'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AppBackendStackName}-cloudwatch-alarm-topic'
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat

  CloudWatchAlarmChatProxyWafAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-chat-proxy-waf-rate-limit
      AlarmDescription: !Sub |
        Alarm when the Chat Proxy WAF rate limit exceeds 300 requests per 5 minutes.
        See resolution steps in runbook:
        {{resolve:ssm:/${ConfigStackName}/runbook-links/prefix}}/pages/4613373954/Runbook+Chat+WAF+throttling
      Namespace: AWS/WAFV2
      ActionsEnabled: true
      MetricName: BlockedRequests
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 5
      Threshold: 300
      DatapointsToAlarm: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WebACL
          Value: !Sub ${AWS::StackName}-waf-chat-proxy
        - Name: Rule
          Value: !Sub ${AWS::StackName}-chat-proxy-waf-rate-limit-rule
        - Name: Region
          Value: !Ref AWS::Region
      AlarmActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AppBackendStackName}-cloudwatch-alarm-topic'
      OKActions:
        - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${AppBackendStackName}-cloudwatch-alarm-topic'
      Tags:
        - Key: Product
          Value: GOV.UK
        - Key: Environment
          Value: !Ref Environment
        - Key: System
          Value: Chat


  # WebSocket API for real-time streaming (dev-only)
  ChatWebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Condition: IsNonIntegratedEnvironment
    Properties:
      Name: !Sub ${AWS::StackName}-chat-websocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      Description: WebSocket API for real-time chat streaming

  ChatWebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $connect
      Target: !Sub integrations/${ChatWebSocketConnectIntegration}

  ChatWebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $disconnect
      Target: !Sub integrations/${ChatWebSocketDisconnectIntegration}

  ChatWebSocketMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      RouteKey: $default
      Target: !Sub integrations/${ChatWebSocketMessageIntegration}

  ChatWebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatWebSocketFunction.Arn}/invocations

  ChatWebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatWebSocketFunction.Arn}/invocations

  ChatWebSocketMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatWebSocketFunction.Arn}/invocations

  ChatWebSocketFunction:
    Type: AWS::Serverless::Function
    Condition: IsNonIntegratedEnvironment
    Properties:
      FunctionName: !Sub ${AWS::StackName}-chat-websocket
      Handler: handler.lambdaHandler
      CodeUri: .build/websocket
      Description: WebSocket handler for real-time chat streaming
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          NODE_OPTIONS: '--enable-source-maps'
          WEBSOCKET_ENDPOINT: !Sub https://${ChatWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
      Tags:
        Product: GOV.UK
        Environment: !Ref Environment
        System: Chat

  ChatWebSocketFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNonIntegratedEnvironment
    Properties:
      FunctionName: !Ref ChatWebSocketFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ChatWebSocketApi}/*/*

  ChatWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Condition: IsNonIntegratedEnvironment
    Properties:
      ApiId: !Ref ChatWebSocketApi
      StageName: !Ref Environment
      AutoDeploy: true


Outputs:
  AWSAccountId:
    Description: The AWS Account ID
    Value: !Ref AWS::AccountId

  ConfigStackName:
    Description: The name of the configuration stack
    Value: !Ref ConfigStackName

  AuthStackName:
    Description: The name of the Auth stack
    Value: !Ref AppBackendStackName

  StackName:
    Description: The name of the CloudFormation stack
    Value: !Ref AWS::StackName

  ChatApiGatewayUrl:
    Description: Auth Proxy Gateway endpoint URL
    Value: !Sub https://${ChatApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/

  ChatStreamingFunctionUrl:
    Condition: IsNonIntegratedEnvironment
    Description: Function URL for the PoC streaming Lambda
    Value: !GetAtt ChatStreamingFunctionUrl.FunctionUrl

  ChatStreamingCloudFrontDomainName:
    Condition: IsNonIntegratedEnvironment
    Description: CloudFront domain name for streaming via Function URL
    Value: !GetAtt ChatStreamingCloudFrontDistribution.DomainName

  ChatWebSocketApiUrl:
    Condition: IsNonIntegratedEnvironment
    Description: WebSocket API URL for real-time streaming
    Value: !Sub wss://${ChatWebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  ChatWebSocketApiId:
    Condition: IsNonIntegratedEnvironment
    Description: The ID of the WebSocket API
    Value: !Ref ChatWebSocketApi

  ChatApiGatewayId:
    Description: The ID of the Chat API Gateway
    Value: !Ref ChatApiGateway

  ChatApiGatewayResourceId:
    Description: The ID of the Chat API Gateway resource
    Value: !Ref ChatApiGatewayResource

  ChatApiGatewayMethodId:
    Description: The ID of the Chat API Gateway method
    Value: !Ref ChatApiGatewayMethod

  ChatApiGatewayDeploymentId:
    Description: The ID of the Chat API Gateway deployment
    Value: !Ref ChatApiGatewayDeployment20250828

  ChatApiGatewayAuthorizerId:
    Description: The ID of the Chat API Gateway authorizer
    Value: !Ref ChatApiGatewayAuthorizer

  ChatApiGatewayAccessLogGroupArn:
    Description: The ARN of the Chat API Gateway access log group
    Value: !GetAtt ChatApiGatewayAccessLogGroup.Arn

  ChatApiGatewayAccessLogGroupName:
    Description: The name of the Chat API Gateway access log group
    Value: !Ref ChatApiGatewayAccessLogGroup

  ChatApiGatewayAccessLogGroupKMSKeyArn:
    Description: The ARN of the Chat API Gateway access log group KMS key
    Value: !GetAtt ChatApiGatewayAccessLogGroupKMSKey.Arn

  ChatApiGatewayStageName:
    Description: The name of the Chat API Gateway stage
    Value: !Ref ChatApiGatewayStage

  ChatAuthorizerFunctionName:
    Description: The name of the Chat authorizer Lambda function
    Value: !Ref ChatAuthorizerFunction

  ChatAuthorizerInvokePermissionId:
    Description: The ID of the permission allowing API Gateway to invoke the Chat authorizer function
    Value: !Ref ChatAuthorizerInvokePermission

  ChatAuthorizerFunctionIAMRoleName:
    Description: The name of the IAM role for the Chat authorizer function
    Value: !Sub ${AWS::StackName}-chat-proxy-authorizer-role

  ChatAuthorizerFunctionIAMRolePolicyName:
    Description: The name of the policy attached to the Chat authorizer function IAM role
    Value: ChatAuthorizerFunctionPolicy

  ChatAuthorizerFunctionKMSKeyArn:
    Description: The ARN of the KMS key used by the Chat authorizer function
    Value: !GetAtt ChatAuthorizerFunctionKMSKey.Arn

  ChatApiGatewayWafLogGroupName:
    Description: The name of the Chat API Gateway WAF log group
    Value: !Ref ChatApiGatewayWafLogGroup
