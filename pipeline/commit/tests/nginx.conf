# nginx.conf
events {
    worker_connections 1024;
}

http {
	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	'$status $body_bytes_sent "$http_referer" '
	'"$http_user_agent" "$http_x_forwarded_for"';
	access_log /dev/stdout main; # Redirect access logs to stdout
	error_log /dev/stderr;       # Redirect error logs to stderr

	# Resolver for external DNS lookups (to bypass Docker DNS)
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Define upstream for your mock service
    upstream mock_service {
        server mock-github-api:3000;
    }

    # Define upstream for real GitHub (using IP to bypass Docker DNS)
    upstream real_github_api {
        server github.com:443;
        keepalive 32;
    }

    upstream real_github_git {
        server github.com:443;
        keepalive 32;
    }

    # Main server block that listens on port 443 (SSL)
    server {
        listen 443 ssl http2;
        server_name github.com;

        # SSL configuration (self-signed cert for testing)
        ssl_certificate /etc/nginx/certs/github.crt;
        ssl_certificate_key /etc/nginx/certs/github.key;
        ssl_protocols TLSv1.2 TLSv1.3;

        # Logging
        #access_log /var/log/nginx/github_access.log;
        #error_log /var/log/nginx/github_error.log;

        # PASSTHROUGH: GitHub Actions downloads (highest priority)
        location ~ ^/actions/ {
            # Use variable to force DNS resolution at request time
            set $github_actions "github.com";
            proxy_pass https://$github_actions;
            
            proxy_set_header Host github.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Remove the mock authorization header for public actions
            proxy_set_header Authorization "";
            
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Git-specific settings for action downloads
            proxy_buffering off;
            proxy_request_buffering off;
            client_max_body_size 0;
            
            # Handle redirects
            proxy_redirect https://github.com/ /;
            
            #access_log /var/log/nginx/github_actions_access.log;
        }

        # INTERCEPT: API requests for pull request files
        location ~ ^/repos/([^/]+)/([^/]+)/pulls/([0-9]+)/files$ {
            proxy_pass http://mock_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add custom header to identify mocked requests
            proxy_set_header X-Mock-Request "true";
            proxy_set_header X-Mock-Type "pull-files";
            
            #access_log /var/log/nginx/mock_access.log;
        }

        # INTERCEPT: API requests for issue comments
        location ~ ^/repos/([^/]+)/([^/]+)/issues/([0-9]+)/comments$ {
            proxy_pass http://mock_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add custom header to identify mocked requests
            proxy_set_header X-Mock-Request "true";
            proxy_set_header X-Mock-Type "issue-comments";
            
            #access_log /var/log/nginx/mock_access.log;
        }

        # PASSTHROUGH: All API requests to real GitHub API
        location ~ ^/api/ {
            # Use variable to force DNS resolution at request time
            set $github_api "api.github.com";
            proxy_pass https://$github_api;
            
            proxy_set_header Host api.github.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Handle redirects
            proxy_redirect https://api.github.com/ /api/;
            
            #access_log /var/log/nginx/github_api_access.log;
        }

        # PASSTHROUGH: Git operations to real GitHub (updated pattern)
        location ~* /(info/refs|git-upload-pack|git-receive-pack) {
            # Use variable to force DNS resolution at request time
            set $github_git "github.com";
            proxy_pass https://$github_git;
            
            proxy_set_header Host github.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Git-specific settings
            proxy_buffering off;
            proxy_request_buffering off;
            client_max_body_size 0;
            
            #access_log /var/log/nginx/github_git_access.log;
        }

        # PASSTHROUGH: Everything else to real GitHub
        location / {
            # Use variable to force DNS resolution at request time
            set $github "github.com";
            proxy_pass https://$github;
            
            proxy_set_header Host github.com;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_ssl_verify off;
            proxy_ssl_server_name on;
            
            # Handle redirects
            proxy_redirect https://github.com/ /;
            
            #access_log /var/log/nginx/github_passthrough_access.log;
        }
    }

    # HTTP to HTTPS redirect
    server {
		proxy_busy_buffers_size   512k;
 		proxy_buffers   4 512k;
 		proxy_buffer_size   256k;
        listen 80;
        server_name github.com;
        return 301 https://$server_name$request_uri;
    }
}
